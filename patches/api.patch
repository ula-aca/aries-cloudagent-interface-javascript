diff --git a/generated/openapi/api.ts b/generated/openapi/api.ts
index 21f6a6f..ec1ff9e 100644
--- a/generated/openapi/api.ts
+++ b/generated/openapi/api.ts
@@ -100,7 +100,7 @@ export interface AttachDecorator {
      * @type {string}
      * @memberof AttachDecorator
      */
-    mime_type?: string;
+    "mime-type"?: string;
     /**
      * File name
      * @type {string}
@@ -583,7 +583,7 @@ export interface CredAttrSpec {
      * @type {string}
      * @memberof CredAttrSpec
      */
-    mime_type?: string | null;
+    "mime-type"?: string | null;
     /**
      * Attribute value: base64-encode if MIME type is present
      * @type {string}
@@ -770,7 +770,7 @@ export interface CredentialPreview {
      * @type {string}
      * @memberof CredentialPreview
      */
-    type?: string;
+    "@type"?: string;
     /**
      * 
      * @type {Array<CredAttrSpec>}
@@ -1441,7 +1441,7 @@ export interface PresAttrSpec {
      * @type {string}
      * @memberof PresAttrSpec
      */
-    mime_type?: string;
+    "mime-type"?: string;
     /**
      * Attribute value
      * @type {string}
@@ -1509,7 +1509,7 @@ export interface PresentationPreview {
      * @type {string}
      * @memberof PresentationPreview
      */
-    type?: string;
+    "@type"?: string;
     /**
      * 
      * @type {Array<PresAttrSpec>}
@@ -6598,7 +6598,7 @@ export const LedgerApiFp = function(configuration?: Configuration) {
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
-        async ledgerDidEndpointGet(did: string, endpointType?: 'Endpoint' | 'Profile' | 'LinkedDomains', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
+        async ledgerDidEndpointGet(did: string, endpointType?: 'Endpoint' | 'Profile' | 'LinkedDomains', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LedgerEndpointGetResults>> {
             const localVarAxiosArgs = await LedgerApiAxiosParamCreator(configuration).ledgerDidEndpointGet(did, endpointType, options);
             return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                 const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
@@ -6612,7 +6612,7 @@ export const LedgerApiFp = function(configuration?: Configuration) {
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
-        async ledgerDidVerkeyGet(did: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
+        async ledgerDidVerkeyGet(did: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LedgerVerkeyGetResults>> {
             const localVarAxiosArgs = await LedgerApiAxiosParamCreator(configuration).ledgerDidVerkeyGet(did, options);
             return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                 const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
@@ -6643,7 +6643,7 @@ export const LedgerApiFp = function(configuration?: Configuration) {
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
-        async ledgerRegisterNymPost(did: string, verkey: string, alias?: string, role?: 'STEWARD' | 'TRUSTEE' | 'ENDORSER' | 'NETWORK_MONITOR' | 'reset', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
+        async ledgerRegisterNymPost(did: string, verkey: string, alias?: string, role?: 'STEWARD' | 'TRUSTEE' | 'ENDORSER' | 'NETWORK_MONITOR' | 'reset', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterNymPostResults>> {
             const localVarAxiosArgs = await LedgerApiAxiosParamCreator(configuration).ledgerRegisterNymPost(did, verkey, alias, role, options);
             return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                 const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
@@ -6707,7 +6707,7 @@ export const LedgerApiFactory = function (configuration?: Configuration, basePat
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
-        ledgerDidEndpointGet(did: string, endpointType?: 'Endpoint' | 'Profile' | 'LinkedDomains', options?: any): AxiosPromise<void> {
+        ledgerDidEndpointGet(did: string, endpointType?: 'Endpoint' | 'Profile' | 'LinkedDomains', options?: any): AxiosPromise<LedgerEndpointGetResults> {
             return LedgerApiFp(configuration).ledgerDidEndpointGet(did, endpointType, options).then((request) => request(axios, basePath));
         },
         /**
@@ -6717,7 +6717,7 @@ export const LedgerApiFactory = function (configuration?: Configuration, basePat
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
-        ledgerDidVerkeyGet(did: string, options?: any): AxiosPromise<void> {
+        ledgerDidVerkeyGet(did: string, options?: any): AxiosPromise<LedgerVerkeyGetResults> {
             return LedgerApiFp(configuration).ledgerDidVerkeyGet(did, options).then((request) => request(axios, basePath));
         },
         /**
@@ -6740,7 +6740,7 @@ export const LedgerApiFactory = function (configuration?: Configuration, basePat
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
-        ledgerRegisterNymPost(did: string, verkey: string, alias?: string, role?: 'STEWARD' | 'TRUSTEE' | 'ENDORSER' | 'NETWORK_MONITOR' | 'reset', options?: any): AxiosPromise<void> {
+        ledgerRegisterNymPost(did: string, verkey: string, alias?: string, role?: 'STEWARD' | 'TRUSTEE' | 'ENDORSER' | 'NETWORK_MONITOR' | 'reset', options?: any): AxiosPromise<RegisterNymPostResults> {
             return LedgerApiFp(configuration).ledgerRegisterNymPost(did, verkey, alias, role, options).then((request) => request(axios, basePath));
         },
         /**
@@ -8862,14 +8862,14 @@ export const ServerApiAxiosParamCreator = function (configuration?: Configuratio
 
 
     
-            const query = new URLSearchParams(localVarUrlObj.search);
+            const search = new URLSearchParams(localVarUrlObj.search);
             for (const key in localVarQueryParameter) {
-                query.set(key, localVarQueryParameter[key]);
+                search.set(key, localVarQueryParameter[key]);
             }
             for (const key in options.query) {
-                query.set(key, options.query[key]);
+                search.set(key, options.query[key]);
             }
-            localVarUrlObj.search = (new URLSearchParams(query)).toString();
+            localVarUrlObj.search = (new URLSearchParams(search)).toString();
             let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
             localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
 
@@ -10066,4 +10066,41 @@ export class WalletApi extends BaseAPI {
     }
 }
 
+/**
+ * 
+ * @export
+ * @interface LedgerVerkeyGetResults
+ */
+export interface LedgerVerkeyGetResults {
+    /**
+     * 
+     * @memberof LedgerVerkeyGetResults
+     */
+    verkey: string | null
+}
 
+/**
+ * 
+ * @export
+ * @interface LedgerEndpointGetResults
+ */
+export interface LedgerEndpointGetResults {
+    /**
+     * 
+     * @memberof LedgerEndpointGetResults
+     */
+    endpoint: string
+}
+
+/**
+ * 
+ * @export
+ * @interface RegisterNymPostResults
+ */
+export interface RegisterNymPostResults {
+    /**
+     * 
+     * @memberof RegisterNymPostResults
+     */
+    success: boolean
+}
