{
  "openapi": "3.0.0",
  "x-origin": [
    {
      "url": "http://178.128.255.156:7002/api/docs/swagger.json",
      "format": "swagger",
      "version": "2.0",
      "converter": {
        "url": "https://github.com/mermade/oas-kit",
        "version": "5.3.1"
      }
    }
  ],
  "paths": {
    "/plugins": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminModules"
                }
              }
            }
          }
        },
        "tags": ["server"],
        "summary": "Fetch the list of loaded plugins"
      }
    },
    "/status": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminStatus"
                }
              }
            }
          }
        },
        "tags": ["server"],
        "summary": "Fetch the server status"
      }
    },
    "/status/reset": {
      "post": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminStatus"
                }
              }
            }
          }
        },
        "tags": ["server"],
        "summary": "Reset statistics"
      }
    },
    "/present-proof/records": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V10PresentationExchangeList"
                }
              }
            }
          }
        },
        "tags": ["present-proof"],
        "summary": "Fetch all present-proof exchange records"
      }
    },
    "/present-proof/records/{pres_ex_id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "pres_ex_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V10PresentationExchange"
                }
              }
            }
          }
        },
        "tags": ["present-proof"],
        "summary": "Fetch a single presentation exchange record"
      }
    },
    "/present-proof/records/{pres_ex_id}/credentials": {
      "get": {
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "count",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "extra_query",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "path",
            "name": "pres_ex_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {},
        "tags": ["present-proof"],
        "summary": "Fetch credentials for a presentation request from wallet"
      }
    },
    "/present-proof/records/{pres_ex_id}/credentials/{referent}": {
      "get": {
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "count",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "extra_query",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "path",
            "name": "pres_ex_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "referent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {},
        "tags": ["present-proof"],
        "summary": "Fetch credentials for a presentation request from wallet"
      }
    },
    "/present-proof/send-proposal": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V10PresentationProposalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V10PresentationExchange"
                }
              }
            }
          }
        },
        "tags": ["present-proof"],
        "summary": "Sends a presentation proposal"
      }
    },
    "/present-proof/create-request": {
      "post": {
        "requestBody": {
          "$ref": "#/components/requestBodies/V10PresentationRequestRequest"
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V10PresentationExchange"
                }
              }
            }
          }
        },
        "tags": ["present-proof"],
        "summary": "\n    Creates a presentation request not bound to any proposal or existing connection\n    "
      }
    },
    "/present-proof/send-request": {
      "post": {
        "requestBody": {
          "$ref": "#/components/requestBodies/V10PresentationRequestRequest"
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V10PresentationExchange"
                }
              }
            }
          }
        },
        "tags": ["present-proof"],
        "summary": "Sends a free presentation request not bound to any proposal"
      }
    },
    "/present-proof/records/{pres_ex_id}/send-request": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "pres_ex_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/V10PresentationRequestRequest"
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V10PresentationExchange"
                }
              }
            }
          }
        },
        "tags": ["present-proof"],
        "summary": "Sends a presentation request in reference to a proposal"
      }
    },
    "/present-proof/records/{pres_ex_id}/send-presentation": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "pres_ex_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V10PresentationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V10PresentationExchange"
                }
              }
            }
          }
        },
        "tags": ["present-proof"],
        "summary": "Sends a proof presentation"
      }
    },
    "/present-proof/records/{pres_ex_id}/verify-presentation": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "pres_ex_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V10PresentationExchange"
                }
              }
            }
          }
        },
        "tags": ["present-proof"],
        "summary": "Verify a received presentation"
      }
    },
    "/present-proof/records/{pres_ex_id}/remove": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "pres_ex_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {},
        "tags": ["present-proof"],
        "summary": "Remove an existing presentation exchange record"
      }
    },
    "/connections/{id}/send-ping": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PingRequestResponse"
                }
              }
            }
          }
        },
        "tags": ["trustping"],
        "summary": "Send a trust ping to a connection"
      }
    },
    "/connections/{id}/start-introduction": {
      "post": {
        "parameters": [
          {
            "name": "target_connection_id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "message",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {},
        "tags": ["introduction"],
        "summary": "Start an introduction between two connections"
      }
    },
    "/connections": {
      "get": {
        "parameters": [
          {
            "name": "alias",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "initiator",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["self", "external"]
            },
            "required": false
          },
          {
            "name": "invitation_key",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "my_did",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "init",
                "invitation",
                "request",
                "response",
                "active",
                "error",
                "inactive"
              ]
            },
            "required": false
          },
          {
            "name": "their_did",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "their_role",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionList"
                }
              }
            }
          }
        },
        "tags": ["connection"],
        "summary": "Query agent-to-agent connections"
      }
    },
    "/connections/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionRecord"
                }
              }
            }
          }
        },
        "tags": ["connection"],
        "summary": "Fetch a single connection record"
      }
    },
    "/connections/create-invitation": {
      "post": {
        "parameters": [
          {
            "name": "alias",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "accept",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["none", "auto"]
            },
            "required": false
          },
          {
            "name": "public",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "multi_use",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationResult"
                }
              }
            }
          }
        },
        "tags": ["connection"],
        "summary": "Create a new connection invitation"
      }
    },
    "/connections/receive-invitation": {
      "post": {
        "parameters": [
          {
            "name": "alias",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "accept",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["none", "auto"]
            },
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionInvitation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionRecord"
                }
              }
            }
          }
        },
        "tags": ["connection"],
        "summary": "Receive a new connection invitation"
      }
    },
    "/connections/{id}/accept-invitation": {
      "post": {
        "parameters": [
          {
            "name": "my_endpoint",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "my_label",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionRecord"
                }
              }
            }
          }
        },
        "tags": ["connection"],
        "summary": "Accept a stored connection invitation"
      }
    },
    "/connections/{id}/accept-request": {
      "post": {
        "parameters": [
          {
            "name": "my_endpoint",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionRecord"
                }
              }
            }
          }
        },
        "tags": ["connection"],
        "summary": "Accept a stored connection request"
      }
    },
    "/connections/{id}/establish-inbound/{ref_id}": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "ref_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {},
        "tags": ["connection"],
        "summary": "Assign another connection as the inbound connection"
      }
    },
    "/connections/{id}/remove": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {},
        "tags": ["connection"],
        "summary": "Remove an existing connection record"
      }
    },
    "/action-menu/{id}/close": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {},
        "tags": ["action-menu"],
        "summary": "Close the active menu associated with a connection"
      }
    },
    "/action-menu/{id}/fetch": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {},
        "tags": ["action-menu"],
        "summary": "Fetch the active menu"
      }
    },
    "/action-menu/{id}/perform": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PerformRequest"
              }
            }
          }
        },
        "responses": {},
        "tags": ["action-menu"],
        "summary": "Perform an action associated with the active menu"
      }
    },
    "/action-menu/{id}/request": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {},
        "tags": ["action-menu"],
        "summary": "Request the active menu"
      }
    },
    "/connections/{id}/send-menu": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMenu"
              }
            }
          }
        },
        "responses": {},
        "tags": ["action-menu"],
        "summary": "Send an action menu to a connection"
      }
    },
    "/connections/{id}/send-message": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMessage"
              }
            }
          }
        },
        "responses": {},
        "tags": ["basicmessage"],
        "summary": "Send a basic message to a connection"
      }
    },
    "/features": {
      "get": {
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                }
              }
            }
          }
        },
        "tags": ["server"],
        "summary": "Query supported features"
      }
    },
    "/presentation_exchange": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PresentationExchangeList"
                }
              }
            }
          }
        },
        "tags": ["presentation_exchange *DEPRECATED*"],
        "summary": "Fetch all presentation exchange records"
      }
    },
    "/presentation_exchange/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PresentationExchange"
                }
              }
            }
          }
        },
        "tags": ["presentation_exchange *DEPRECATED*"],
        "summary": "Fetch a single presentation exchange record"
      }
    },
    "/presentation_exchange/{id}/credentials": {
      "get": {
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "count",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "extra_query",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {},
        "tags": ["presentation_exchange *DEPRECATED*"],
        "summary": "Fetch credentials for a presentation request from wallet"
      }
    },
    "/presentation_exchange/{id}/credentials/{referent}": {
      "get": {
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "count",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "extra_query",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "referent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {},
        "tags": ["presentation_exchange *DEPRECATED*"],
        "summary": "Fetch credentials for a presentation request from wallet"
      }
    },
    "/presentation_exchange/create_request": {
      "post": {
        "requestBody": {
          "$ref": "#/components/requestBodies/PresentationRequestRequest"
        },
        "responses": {},
        "tags": ["presentation_exchange *DEPRECATED*"],
        "summary": "Creates a presentation request"
      }
    },
    "/presentation_exchange/send_request": {
      "post": {
        "requestBody": {
          "$ref": "#/components/requestBodies/PresentationRequestRequest"
        },
        "responses": {},
        "tags": ["presentation_exchange *DEPRECATED*"],
        "summary": "Creates and sends a presentation request"
      }
    },
    "/presentation_exchange/{id}/send_presentation": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendPresentationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PresentationExchange"
                }
              }
            }
          }
        },
        "tags": ["presentation_exchange *DEPRECATED*"],
        "summary": "Sends a credential presentation"
      }
    },
    "/presentation_exchange/{id}/verify_presentation": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PresentationExchange"
                }
              }
            }
          }
        },
        "tags": ["presentation_exchange *DEPRECATED*"],
        "summary": "Verify a received credential presentation"
      }
    },
    "/presentation_exchange/{id}/remove": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {},
        "tags": ["presentation_exchange *DEPRECATED*"],
        "summary": "Remove an existing presentation exchange record"
      }
    },
    "/issue-credential/mime-types/{credential_id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "credential_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V10AttributeMimeTypesResult"
                }
              }
            }
          }
        },
        "tags": ["issue-credential"],
        "summary": "Get attribute MIME types from wallet"
      }
    },
    "/issue-credential/records": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V10CredentialExchangeListResult"
                }
              }
            }
          }
        },
        "tags": ["issue-credential"],
        "summary": "Fetch all credential exchange records"
      }
    },
    "/issue-credential/records/{cred_ex_id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "cred_ex_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V10CredentialExchange"
                }
              }
            }
          }
        },
        "tags": ["issue-credential"],
        "summary": "Fetch a single credential exchange record"
      }
    },
    "/issue-credential/send": {
      "post": {
        "requestBody": {
          "$ref": "#/components/requestBodies/V10CredentialProposalRequest"
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V10CredentialExchange"
                }
              }
            }
          }
        },
        "tags": ["issue-credential"],
        "summary": "Send credential, automating entire flow"
      }
    },
    "/issue-credential/send-proposal": {
      "post": {
        "requestBody": {
          "$ref": "#/components/requestBodies/V10CredentialProposalRequest"
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V10CredentialExchange"
                }
              }
            }
          }
        },
        "tags": ["issue-credential"],
        "summary": "Send issuer a credential proposal"
      }
    },
    "/issue-credential/send-offer": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V10CredentialOfferRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V10CredentialExchange"
                }
              }
            }
          }
        },
        "tags": ["issue-credential"],
        "summary": "Send holder a credential offer, free from reference to any proposal"
      }
    },
    "/issue-credential/records/{cred_ex_id}/send-offer": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "cred_ex_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V10CredentialExchange"
                }
              }
            }
          }
        },
        "tags": ["issue-credential"],
        "summary": "Send holder a credential offer in reference to a proposal"
      }
    },
    "/issue-credential/records/{cred_ex_id}/send-request": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "cred_ex_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V10CredentialExchange"
                }
              }
            }
          }
        },
        "tags": ["issue-credential"],
        "summary": "Send a credential request"
      }
    },
    "/issue-credential/records/{cred_ex_id}/issue": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "cred_ex_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V10CredentialIssueRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V10CredentialExchange"
                }
              }
            }
          }
        },
        "tags": ["issue-credential"],
        "summary": "Send a credential"
      }
    },
    "/issue-credential/records/{cred_ex_id}/store": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "cred_ex_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V10CredentialExchange"
                }
              }
            }
          }
        },
        "tags": ["issue-credential"],
        "summary": "Store a received credential"
      }
    },
    "/issue-credential/records/{cred_ex_id}/problem-report": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "cred_ex_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/V10CredentialProblemReportRequest"
              }
            }
          }
        },
        "responses": {},
        "tags": ["issue-credential"],
        "summary": "Send a problem report for credential exchange"
      }
    },
    "/issue-credential/records/{cred_ex_id}/remove": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "cred_ex_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {},
        "tags": ["issue-credential"],
        "summary": "Remove an existing credential exchange record"
      }
    },
    "/credential/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Credential"
                }
              }
            }
          }
        },
        "tags": ["credentials"],
        "summary": "Fetch a credential from wallet by id"
      }
    },
    "/credential/{id}/remove": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {},
        "tags": ["credentials"],
        "summary": "Remove a credential from the wallet by id"
      }
    },
    "/credentials": {
      "get": {
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "count",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "wql",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialList"
                }
              }
            }
          }
        },
        "tags": ["credentials"],
        "summary": "Fetch credentials from wallet"
      }
    },
    "/credential_exchange": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialExchangeList"
                }
              }
            }
          }
        },
        "tags": ["credential_exchange *DEPRECATED*"],
        "summary": "Fetch all credential exchange records"
      }
    },
    "/credential_exchange/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialExchange"
                }
              }
            }
          }
        },
        "tags": ["credential_exchange *DEPRECATED*"],
        "summary": "Fetch a single credential exchange record"
      }
    },
    "/credential_exchange/send": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialSendRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialSendResult"
                }
              }
            }
          }
        },
        "tags": ["credential_exchange *DEPRECATED*"],
        "summary": "Sends a credential and automates the entire flow"
      }
    },
    "/credential_exchange/send-offer": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialOfferRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialOfferResult"
                }
              }
            }
          }
        },
        "tags": ["credential_exchange *DEPRECATED*"],
        "summary": "Sends a credential offer"
      }
    },
    "/credential_exchange/{id}/send-request": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialRequestResult"
                }
              }
            }
          }
        },
        "tags": ["credential_exchange *DEPRECATED*"],
        "summary": "Sends a credential request"
      }
    },
    "/credential_exchange/{id}/issue": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialIssueRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialIssueResult"
                }
              }
            }
          }
        },
        "tags": ["credential_exchange *DEPRECATED*"],
        "summary": "Sends a credential"
      }
    },
    "/credential_exchange/{id}/store": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialStoreRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialRequestResult"
                }
              }
            }
          }
        },
        "tags": ["credential_exchange *DEPRECATED*"],
        "summary": "Stores a received credential"
      }
    },
    "/credential_exchange/{id}/problem_report": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialProblemReportRequest"
              }
            }
          }
        },
        "responses": {},
        "tags": ["credential_exchange *DEPRECATED*"],
        "summary": "Send a problem report for credential exchange"
      }
    },
    "/credential_exchange/{id}/remove": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {},
        "tags": ["credential_exchange *DEPRECATED*"],
        "summary": "Remove an existing credential exchange record"
      }
    },
    "/ledger/register-nym": {
      "post": {
        "parameters": [
          {
            "name": "did",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "verkey",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "alias",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "role",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {},
        "tags": ["ledger"],
        "summary": "Send a NYM registration to the ledger."
      }
    },
    "/ledger/did-verkey": {
      "get": {
        "parameters": [
          {
            "name": "did",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {},
        "tags": ["ledger"],
        "summary": "Get the verkey for a DID from the ledger."
      }
    },
    "/ledger/did-endpoint": {
      "get": {
        "parameters": [
          {
            "name": "did",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {},
        "tags": ["ledger"],
        "summary": "Get the endpoint for a DID from the ledger."
      }
    },
    "/ledger/taa": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TAAResult"
                }
              }
            }
          }
        },
        "tags": ["ledger"],
        "summary": "Fetch the current transaction author agreement, if any"
      }
    },
    "/ledger/taa/accept": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TAAAccept"
              }
            }
          }
        },
        "responses": {},
        "tags": ["ledger"],
        "summary": "Accept the transaction author agreement"
      }
    },
    "/credential-definitions": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialDefinitionSendRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialDefinitionSendResults"
                }
              }
            }
          }
        },
        "tags": ["credential-definition"],
        "summary": "Sends a credential definition to the ledger"
      }
    },
    "/credential-definitions/created": {
      "get": {
        "parameters": [
          {
            "name": "schema_id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "schema_issuer_did",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "schema_name",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "schema_version",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "issuer_did",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "cred_def_id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialDefinitionsCreatedResults"
                }
              }
            }
          }
        },
        "tags": ["credential-definition"],
        "summary": "Search for matching credential definitions that agent originated"
      }
    },
    "/credential-definitions/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialDefinitionGetResults"
                }
              }
            }
          }
        },
        "tags": ["credential-definition"],
        "summary": "Gets a credential definition from the ledger"
      }
    },
    "/schemas": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaSendRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaSendResults"
                }
              }
            }
          }
        },
        "tags": ["schema"],
        "summary": "Sends a schema to the ledger"
      }
    },
    "/schemas/created": {
      "get": {
        "parameters": [
          {
            "name": "schema_id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "schema_issuer_did",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "schema_name",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "schema_version",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemasCreatedResults"
                }
              }
            }
          }
        },
        "tags": ["schema"],
        "summary": "Search for matching schema that agent originated"
      }
    },
    "/schemas/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaGetResults"
                }
              }
            }
          }
        },
        "tags": ["schema"],
        "summary": "Gets a schema from the ledger"
      }
    },
    "/wallet/did": {
      "get": {
        "parameters": [
          {
            "name": "did",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "verkey",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "public",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DIDList"
                }
              }
            }
          }
        },
        "tags": ["wallet"],
        "summary": "List wallet DIDs"
      }
    },
    "/wallet/did/create": {
      "post": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DIDResult"
                }
              }
            }
          }
        },
        "tags": ["wallet"],
        "summary": "Create a local DID"
      }
    },
    "/wallet/did/public": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DIDResult"
                }
              }
            }
          }
        },
        "tags": ["wallet"],
        "summary": "Fetch the current public DID"
      },
      "post": {
        "parameters": [
          {
            "name": "did",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DIDResult"
                }
              }
            }
          }
        },
        "tags": ["wallet"],
        "summary": "Assign the current public DID"
      }
    },
    "/wallet/tag-policy/{id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTagPolicyResult"
                }
              }
            }
          }
        },
        "tags": ["wallet"],
        "summary": "Get the tagging policy for a credential definition"
      },
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetTagPolicyRequest"
              }
            }
          }
        },
        "responses": {},
        "tags": ["wallet"],
        "summary": "Set the tagging policy for a credential definition"
      }
    }
  },
  "info": {
    "title": "Faber Agent",
    "version": "v0.4.0"
  },
  "components": {
    "requestBodies": {
      "V10PresentationRequestRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/V10PresentationRequestRequest"
            }
          }
        }
      },
      "V10CredentialProposalRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/V10CredentialProposalRequest"
            }
          }
        }
      },
      "PresentationRequestRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PresentationRequestRequest"
            }
          }
        }
      }
    },
    "schemas": {
      "AdminModules": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "description": "List of admin modules",
            "items": {
              "type": "string",
              "description": "admin module"
            }
          }
        }
      },
      "AdminStatus": {
        "type": "object",
        "properties": {}
      },
      "V10PresentationExchange": {
        "type": "object",
        "properties": {
          "presentation_exchange_id": {
            "type": "string",
            "description": "Presentation exchange identifier",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "presentation_proposal_dict": {
            "type": "object",
            "description": "Serialized presentation proposal message"
          },
          "error_msg": {
            "type": "string",
            "description": "Error message",
            "example": "Invalid structure"
          },
          "updated_at": {
            "type": "string",
            "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
            "description": "Time of last record update",
            "example": "2019-12-12 09:44:08Z"
          },
          "initiator": {
            "type": "string",
            "enum": ["self", "external"],
            "description": "Present-proof exchange initiator: self or external",
            "example": "self"
          },
          "thread_id": {
            "type": "string",
            "description": "Thread identifier",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "presentation": {
            "type": "object",
            "description": "(Indy) presentation (also known as proof)"
          },
          "verified": {
            "type": "string",
            "enum": ["true", "false"],
            "description": "Whether presentation is verified: true or false",
            "example": "true"
          },
          "auto_present": {
            "type": "boolean",
            "description": "Prover choice to auto-present proof as verifier requests",
            "example": false
          },
          "connection_id": {
            "type": "string",
            "description": "Connection identifier",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "presentation_request": {
            "type": "object",
            "description": "(Indy) presentation request (also known as proof request)"
          },
          "state": {
            "type": "string",
            "description": "Present-proof exchange state",
            "example": "verified"
          },
          "created_at": {
            "type": "string",
            "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
            "description": "Time of record creation",
            "example": "2019-12-12 09:44:08Z"
          },
          "role": {
            "type": "string",
            "enum": ["prover", "verifier"],
            "description": "Present-proof exchange role: prover or verifier",
            "example": "prover"
          }
        }
      },
      "V10PresentationExchangeList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "description": "Aries#0037 v1.0 presentation exchange records",
            "items": {
              "$ref": "#/components/schemas/V10PresentationExchange"
            }
          }
        }
      },
      "PresAttrSpec": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Attribute name",
            "example": "favourite_drink"
          },
          "cred_def_id": {
            "type": "string",
            "pattern": "([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(.+)?$",
            "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
          },
          "mime-type": {
            "type": "string",
            "description": "MIME type (default null)",
            "example": "image/jpeg"
          },
          "value": {
            "type": "string",
            "description": "Attribute value",
            "example": "martini"
          }
        },
        "required": ["name"]
      },
      "PresPredSpec": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Attribute name",
            "example": "high_score"
          },
          "cred_def_id": {
            "type": "string",
            "pattern": "([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(.+)?$",
            "description": "Credential definition identifier",
            "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
          },
          "predicate": {
            "type": "string",
            "enum": ["<", "<=", ">=", ">"],
            "description": "Predicate (currently, indy supports >=)",
            "example": ">="
          },
          "threshold": {
            "type": "integer",
            "format": "int32",
            "description": "Threshold value"
          }
        },
        "required": ["cred_def_id", "name", "predicate", "threshold"]
      },
      "PresentationPreview": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "enum": [
              "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/present-proof/1.0/presentation-preview"
            ],
            "description": "Message type identifier",
            "example": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/present-proof/1.0/presentation-preview"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PresAttrSpec"
            }
          },
          "predicates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PresPredSpec"
            }
          }
        },
        "required": ["attributes", "predicates"]
      },
      "V10PresentationProposalRequest": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "description": "Human-readable comment"
          },
          "connection_id": {
            "type": "string",
            "format": "uuid",
            "description": "Connection identifier",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "presentation_proposal": {
            "$ref": "#/components/schemas/PresentationPreview"
          },
          "auto_present": {
            "type": "boolean",
            "description": "Whether to respond automatically to presentation requests, building and presenting requested proof"
          }
        },
        "required": ["connection_id", "presentation_proposal"]
      },
      "IndyProofReqNonRevoked": {
        "type": "object",
        "properties": {
          "to_epoch": {
            "type": "integer",
            "format": "int32",
            "minimum": -9223372036854776000,
            "maximum": 9223372036854776000,
            "description": "Latest epoch of interest for non-revocation proof",
            "example": 1576143848
          },
          "from_epoch": {
            "type": "integer",
            "format": "int32",
            "minimum": -9223372036854776000,
            "maximum": 9223372036854776000,
            "description": "Earliest epoch of interest for non-revocation proof",
            "example": 1576143848
          }
        },
        "required": ["from_epoch", "to_epoch"]
      },
      "IndyProofReqSpecRestrictions": {
        "type": "object",
        "properties": {
          "credential_definition_id": {
            "type": "string",
            "pattern": "([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(.+)?$",
            "description": "Credential definition identifier",
            "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
          },
          "issuer_did": {
            "type": "string",
            "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
            "description": "Credential issuer DID",
            "example": "WgWxqztrNooG92RXvxSTWv"
          },
          "schema_name": {
            "type": "string",
            "example": "transcript",
            "description": "Schema name"
          },
          "cred_def_id": {
            "type": "string",
            "pattern": "([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(.+)?$",
            "description": "Credential definition identifier",
            "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
          },
          "schema_version": {
            "type": "string",
            "pattern": "^[0-9.]+$",
            "description": "Schema version",
            "example": "1.0"
          },
          "schema_id": {
            "type": "string",
            "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
            "description": "Schema identifier",
            "example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
          },
          "schema_issuer_did": {
            "type": "string",
            "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
            "description": "Schema issuer (origin) DID",
            "example": "WgWxqztrNooG92RXvxSTWv"
          }
        },
        "required": ["credential_definition_id"]
      },
      "IndyProofReqPredSpec": {
        "type": "object",
        "properties": {
          "non_revoked": {
            "$ref": "#/components/schemas/IndyProofReqNonRevoked"
          },
          "restrictions": {
            "type": "array",
            "description": "If present, credential must satisfy one of given restrictions",
            "items": {
              "$ref": "#/components/schemas/IndyProofReqSpecRestrictions"
            }
          },
          "name": {
            "type": "string",
            "example": "index",
            "description": "Attribute name"
          }
        },
        "required": ["name"]
      },
      "IndyProofReqAttrSpec": {
        "type": "object",
        "properties": {
          "non_revoked": {
            "$ref": "#/components/schemas/IndyProofReqNonRevoked"
          },
          "restrictions": {
            "type": "array",
            "description": "If present, credential must satisfy one of given restrictions",
            "items": {
              "$ref": "#/components/schemas/IndyProofReqSpecRestrictions"
            }
          },
          "name": {
            "type": "string",
            "example": "favouriteDrink",
            "description": "Attribute name"
          }
        },
        "required": ["name"]
      },
      "IndyProofRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Proof request name",
            "example": "Proof request"
          },
          "version": {
            "type": "string",
            "pattern": "^[0-9.]+$",
            "description": "Proof request version",
            "example": "1.0"
          },
          "nonce": {
            "type": "string",
            "description": "Nonce",
            "example": "1234567890"
          },
          "requested_predicates": {
            "type": "object",
            "description": "Requested predicate specifications of proof request",
            "additionalProperties": {
              "$ref": "#/components/schemas/IndyProofReqPredSpec"
            }
          },
          "requested_attributes": {
            "type": "object",
            "description": "Requested attribute specifications of proof request",
            "additionalProperties": {
              "$ref": "#/components/schemas/IndyProofReqAttrSpec"
            }
          }
        },
        "required": ["requested_attributes", "requested_predicates"]
      },
      "V10PresentationRequestRequest": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "proof_request": {
            "$ref": "#/components/schemas/IndyProofRequest"
          },
          "connection_id": {
            "type": "string",
            "format": "uuid",
            "description": "Connection identifier",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        },
        "required": ["connection_id", "proof_request"]
      },
      "IndyRequestedCredsRequestedAttr": {
        "type": "object",
        "properties": {
          "revealed": {
            "type": "boolean",
            "description": "Whether to reveal attribute in proof"
          },
          "cred_id": {
            "type": "string",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "description": "Wallet credential identifier (typically but not necessarily a UUID)"
          }
        }
      },
      "IndyRequestedCredsRequestedPred": {
        "type": "object",
        "properties": {
          "cred_id": {
            "type": "string",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "description": "Wallet credential identifier (typically but not necessarily a UUID)"
          }
        }
      },
      "V10PresentationRequest": {
        "type": "object",
        "properties": {
          "requested_attributes": {
            "type": "object",
            "description": "Nested object mapping proof request attribute referents to requested-attribute specifiers",
            "additionalProperties": {
              "$ref": "#/components/schemas/IndyRequestedCredsRequestedAttr"
            }
          },
          "self_attested_attributes": {
            "type": "object",
            "description": "Self-attested attributes to build into proof",
            "additionalProperties": {
              "type": "string",
              "example": "self_attested_value",
              "description": "Self-attested attribute values to use in requested-credentials structure for proof construction"
            }
          },
          "requested_predicates": {
            "type": "object",
            "description": "Nested object mapping proof request predicate referents to requested-predicate specifiers",
            "additionalProperties": {
              "$ref": "#/components/schemas/IndyRequestedCredsRequestedPred"
            }
          }
        },
        "required": [
          "requested_attributes",
          "requested_predicates",
          "self_attested_attributes"
        ]
      },
      "PingRequest": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "description": "Comment for the ping message"
          }
        }
      },
      "PingRequestResponse": {
        "type": "object",
        "properties": {
          "thread_id": {
            "type": "string",
            "description": "Thread ID of the ping message"
          }
        }
      },
      "ConnectionRecord": {
        "type": "object",
        "properties": {
          "invitation_mode": {
            "type": "string",
            "enum": ["once", "multi", "static"],
            "description": "Invitation mode: once, multi, or static",
            "example": "once"
          },
          "routing_state": {
            "type": "string",
            "description": "Routing state of connection",
            "example": "active"
          },
          "updated_at": {
            "type": "string",
            "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
            "description": "Time of last record update",
            "example": "2019-12-12 09:44:08Z"
          },
          "initiator": {
            "type": "string",
            "enum": ["self", "external", "multiuse"],
            "description": "Connection initiator: self, external, or multiuse",
            "example": "self"
          },
          "inbound_connection_id": {
            "type": "string",
            "description": "Inbound routing connection id to use",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "error_msg": {
            "type": "string",
            "description": "Error message",
            "example": "No DIDDoc provided; cannot connect to public DID"
          },
          "invitation_key": {
            "type": "string",
            "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
            "description": "Public key for connection",
            "example": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
          },
          "their_role": {
            "type": "string",
            "description": "Their assigned role for connection",
            "example": "Point of contact"
          },
          "their_did": {
            "type": "string",
            "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
            "description": "Their DID for connection",
            "example": "WgWxqztrNooG92RXvxSTWv"
          },
          "alias": {
            "type": "string",
            "description": "Optional alias to apply to connection for later use",
            "example": "Bob, providing quotes"
          },
          "connection_id": {
            "type": "string",
            "description": "Connection identifier",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "my_did": {
            "type": "string",
            "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
            "description": "Our DID for connection",
            "example": "WgWxqztrNooG92RXvxSTWv"
          },
          "state": {
            "type": "string",
            "description": "Current record state",
            "example": "active"
          },
          "created_at": {
            "type": "string",
            "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
            "description": "Time of record creation",
            "example": "2019-12-12 09:44:08Z"
          },
          "accept": {
            "type": "string",
            "enum": ["manual", "auto"],
            "description": "Connection acceptance: manual or auto",
            "example": "auto"
          },
          "their_label": {
            "type": "string",
            "description": "Their label for connection",
            "example": "Bob"
          },
          "request_id": {
            "type": "string",
            "description": "Connection request identifier",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        }
      },
      "ConnectionList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "description": "List of connection records",
            "items": {
              "$ref": "#/components/schemas/ConnectionRecord"
            }
          }
        }
      },
      "ConnectionInvitation": {
        "type": "object",
        "properties": {
          "recipientKeys": {
            "type": "array",
            "description": "List of recipient keys",
            "items": {
              "type": "string",
              "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
              "description": "Recipient public key",
              "example": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
            }
          },
          "routingKeys": {
            "type": "array",
            "description": "List of routing keys",
            "items": {
              "type": "string",
              "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
              "description": "Routing key",
              "example": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
            }
          },
          "@id": {
            "type": "string",
            "description": "Message identifier",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "@type": {
            "type": "string",
            "readOnly": true,
            "description": "Message type",
            "example": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/my-family/1.0/my-message-type"
          },
          "did": {
            "type": "string",
            "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
            "description": "DID for connection invitation",
            "example": "WgWxqztrNooG92RXvxSTWv"
          },
          "imageUrl": {
            "type": "string",
            "format": "url",
            "description": "Optional image URL for connection invitation",
            "example": "http://192.168.56.101/img/logo.jpg",
            "nullable": true
          },
          "label": {
            "type": "string",
            "description": "Optional label for connection",
            "example": "Bob"
          },
          "serviceEndpoint": {
            "type": "string",
            "description": "Service endpoint at which to reach this agent",
            "example": "http://192.168.56.101:8020"
          }
        }
      },
      "InvitationResult": {
        "type": "object",
        "properties": {
          "invitation": {
            "$ref": "#/components/schemas/ConnectionInvitation"
          },
          "invitation_url": {
            "type": "string",
            "description": "Invitation URL",
            "example": "http://192.168.56.101:8020/invite?c_i=eyJAdHlwZSI6Li4ufQ=="
          },
          "connection_id": {
            "type": "string",
            "description": "Connection identifier",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        }
      },
      "PerformRequest": {
        "type": "object",
        "properties": {
          "params": {
            "type": "object",
            "description": "Input parameter values",
            "additionalProperties": {
              "type": "string",
              "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
            }
          },
          "name": {
            "type": "string",
            "description": "Menu option name",
            "example": "Query"
          }
        }
      },
      "MenuFormParam": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Menu parameter name",
            "example": "delay"
          },
          "title": {
            "type": "string",
            "description": "Menu parameter title",
            "example": "Delay in seconds"
          },
          "default": {
            "type": "string",
            "description": "Default parameter value",
            "example": "0"
          },
          "description": {
            "type": "string",
            "description": "Additional descriptive text for menu form parameter",
            "example": "Delay in seconds before starting"
          },
          "type": {
            "type": "string",
            "description": "Menu form parameter input type",
            "example": "int"
          },
          "required": {
            "type": "boolean",
            "description": "Whether parameter is required",
            "example": "False"
          }
        },
        "required": ["name", "title"]
      },
      "MenuForm": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Menu form title",
            "example": "Preferences"
          },
          "description": {
            "type": "string",
            "description": "Additional descriptive text for menu form",
            "example": "Window preference settings"
          },
          "params": {
            "type": "array",
            "description": "List of form parameters",
            "example": "[alpha, x_offset, y_offset, height, width, bgcolor, fgcolor]",
            "items": {
              "$ref": "#/components/schemas/MenuFormParam"
            }
          },
          "submit-label": {
            "type": "string",
            "description": "Alternative label for form submit button",
            "example": "Send"
          }
        }
      },
      "MenuOption": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Menu option name (unique identifier)",
            "example": "window_prefs"
          },
          "title": {
            "type": "string",
            "description": "Menu option title",
            "example": "Window Preferences"
          },
          "description": {
            "type": "string",
            "description": "Additional descriptive text for menu option",
            "example": "Window display preferences"
          },
          "disabled": {
            "type": "boolean",
            "description": "Whether to show option as disabled",
            "example": "False"
          },
          "form": {
            "$ref": "#/components/schemas/MenuForm"
          }
        },
        "required": ["name", "title"]
      },
      "MenuJson": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Menu title",
            "example": "My Menu"
          },
          "errormsg": {
            "type": "string",
            "description": "Optional error message to display in menu header",
            "example": "Error: item not present"
          },
          "options": {
            "type": "array",
            "description": "List of menu options",
            "items": {
              "$ref": "#/components/schemas/MenuOption"
            }
          },
          "description": {
            "type": "string",
            "description": "Introductory text for the menu",
            "example": "User preferences for window settings"
          }
        },
        "required": ["options"]
      },
      "SendMenu": {
        "type": "object",
        "properties": {
          "menu": {
            "description": "Menu to send to connection",
            "allOf": [
              {
                "$ref": "#/components/schemas/MenuJson"
              }
            ]
          }
        },
        "required": ["menu"]
      },
      "SendMessage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Message content",
            "example": "Hello"
          }
        }
      },
      "QueryResult": {
        "type": "object",
        "properties": {
          "results": {
            "type": "object",
            "description": "Query results keyed by protocol",
            "additionalProperties": {
              "type": "object",
              "description": "Protocol descriptor"
            }
          }
        }
      },
      "PresentationExchange": {
        "type": "object",
        "properties": {
          "presentation_exchange_id": {
            "type": "string"
          },
          "error_msg": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
            "description": "Time of last record update",
            "example": "2019-12-12 09:44:08Z"
          },
          "initiator": {
            "type": "string"
          },
          "thread_id": {
            "type": "string"
          },
          "presentation": {
            "type": "object"
          },
          "verified": {
            "type": "string"
          },
          "connection_id": {
            "type": "string"
          },
          "presentation_request": {
            "type": "object"
          },
          "state": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
            "description": "Time of record creation",
            "example": "2019-12-12 09:44:08Z"
          }
        }
      },
      "PresentationExchangeList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PresentationExchange"
            }
          }
        }
      },
      "RequestedPredicate": {
        "type": "object",
        "properties": {
          "p_type": {
            "type": "string"
          },
          "restrictions": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "name": {
            "type": "string"
          },
          "p_value": {
            "type": "string"
          }
        },
        "required": ["name", "p_type", "p_value"]
      },
      "RequestedAttribute": {
        "type": "object",
        "properties": {
          "restrictions": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "name": {
            "type": "string"
          }
        },
        "required": ["name"]
      },
      "PresentationRequestRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "requested_predicates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedPredicate"
            }
          },
          "connection_id": {
            "type": "string"
          },
          "requested_attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedAttribute"
            }
          }
        },
        "required": ["connection_id", "name", "version"]
      },
      "SendPresentationRequest": {
        "type": "object",
        "properties": {
          "requested_attributes": {
            "type": "object"
          },
          "self_attested_attributes": {
            "type": "object"
          },
          "requested_predicates": {
            "type": "object"
          }
        },
        "required": [
          "requested_attributes",
          "requested_predicates",
          "self_attested_attributes"
        ]
      },
      "V10AttributeMimeTypesResult": {
        "type": "object",
        "properties": {}
      },
      "V10CredentialExchange": {
        "type": "object",
        "properties": {
          "credential_definition_id": {
            "type": "string",
            "pattern": "([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(.+)?$",
            "description": "Credential definition identifier",
            "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
          },
          "credential": {
            "type": "object",
            "description": "Credential as stored"
          },
          "initiator": {
            "type": "string",
            "enum": ["self", "external"],
            "description": "Issue-credential exchange initiator: self or external",
            "example": "self"
          },
          "credential_request": {
            "type": "object",
            "description": "(Indy) credential request"
          },
          "credential_request_metadata": {
            "type": "object",
            "description": "(Indy) credential request metadata"
          },
          "error_msg": {
            "type": "string",
            "description": "Error message",
            "example": "credential definition identifier is not set in proposal"
          },
          "updated_at": {
            "type": "string",
            "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
            "description": "Time of last record update",
            "example": "2019-12-12 09:44:08Z"
          },
          "credential_proposal_dict": {
            "type": "object",
            "description": "Serialized credential proposal message"
          },
          "auto_issue": {
            "type": "boolean",
            "description": "Issuer choice to issue to request in this credential exchange",
            "example": false
          },
          "raw_credential": {
            "type": "object",
            "description": "Credential as received, prior to storage in holder wallet"
          },
          "connection_id": {
            "type": "string",
            "description": "Connection identifier",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "parent_thread_id": {
            "type": "string",
            "description": "Parent thread identifier",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "state": {
            "type": "string",
            "description": "Issue-credential exchange state",
            "example": "credential_acked"
          },
          "credential_id": {
            "type": "string",
            "description": "Credential identifier",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "role": {
            "type": "string",
            "enum": ["holder", "issuer"],
            "description": "Issue-credential exchange role: holder or issuer",
            "example": "issuer"
          },
          "auto_offer": {
            "type": "boolean",
            "description": "Holder choice to accept offer in this credential exchange",
            "example": false
          },
          "credential_exchange_id": {
            "type": "string",
            "description": "Credential exchange identifier",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "thread_id": {
            "type": "string",
            "description": "Thread identifier",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "credential_offer": {
            "type": "object",
            "description": "(Indy) credential offer"
          },
          "schema_id": {
            "type": "string",
            "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
            "description": "Schema identifier",
            "example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
          },
          "created_at": {
            "type": "string",
            "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
            "description": "Time of record creation",
            "example": "2019-12-12 09:44:08Z"
          }
        }
      },
      "V10CredentialExchangeListResult": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "description": "Aries#0036 v1.0 credential exchange records",
            "items": {
              "$ref": "#/components/schemas/V10CredentialExchange"
            }
          }
        }
      },
      "CredAttrSpec": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Attribute name",
            "example": "favourite_drink"
          },
          "mime-type": {
            "type": "string",
            "description": "MIME type: omit for (null) default",
            "example": "image/jpeg",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "Attribute value: base64-encode if MIME type is present",
            "example": "martini"
          }
        },
        "required": ["name", "value"]
      },
      "CredentialPreview": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "enum": [
              "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/issue-credential/1.0/credential-preview"
            ],
            "description": "Message type identifier",
            "example": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/issue-credential/1.0/credential-preview"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CredAttrSpec"
            }
          }
        },
        "required": ["attributes"]
      },
      "V10CredentialProposalRequest": {
        "type": "object",
        "properties": {
          "issuer_did": {
            "type": "string",
            "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
            "description": "Credential issuer DID",
            "example": "WgWxqztrNooG92RXvxSTWv"
          },
          "credential_proposal": {
            "$ref": "#/components/schemas/CredentialPreview"
          },
          "schema_name": {
            "type": "string",
            "description": "Schema name",
            "example": "preferences"
          },
          "cred_def_id": {
            "type": "string",
            "pattern": "([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(.+)?$",
            "description": "Credential definition identifier",
            "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
          },
          "connection_id": {
            "type": "string",
            "format": "uuid",
            "description": "Connection identifier",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "schema_version": {
            "type": "string",
            "pattern": "^[0-9.]+$",
            "description": "Schema version",
            "example": "1.0"
          },
          "schema_id": {
            "type": "string",
            "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
            "description": "Schema identifier",
            "example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
          },
          "comment": {
            "type": "string",
            "description": "Human-readable comment"
          },
          "schema_issuer_did": {
            "type": "string",
            "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
            "description": "Schema issuer DID",
            "example": "WgWxqztrNooG92RXvxSTWv"
          }
        },
        "required": ["connection_id", "credential_proposal"]
      },
      "V10CredentialOfferRequest": {
        "type": "object",
        "properties": {
          "credential_preview": {
            "$ref": "#/components/schemas/CredentialPreview"
          },
          "auto_issue": {
            "type": "boolean",
            "description": "Whether to respond automatically to credential requests, creating and issuing requested credentials"
          },
          "cred_def_id": {
            "type": "string",
            "pattern": "([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(.+)?$",
            "description": "Credential definition identifier",
            "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
          },
          "connection_id": {
            "type": "string",
            "format": "uuid",
            "description": "Connection identifier",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "comment": {
            "type": "string",
            "description": "Human-readable comment"
          }
        },
        "required": ["connection_id", "cred_def_id", "credential_preview"]
      },
      "V10CredentialIssueRequest": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "description": "Human-readable comment"
          },
          "credential_preview": {
            "$ref": "#/components/schemas/CredentialPreview"
          }
        },
        "required": ["credential_preview"]
      },
      "V10CredentialProblemReportRequest": {
        "type": "object",
        "properties": {
          "explain_ltxt": {
            "type": "string"
          }
        },
        "required": ["explain_ltxt"]
      },
      "RevReg": {
        "type": "object",
        "properties": {
          "accum": {
            "type": "string",
            "description": "Revocation registry accumulator state",
            "example": "21 136D54EA439FC26F03DB4b812 21 123DE9F624B86823A00D ..."
          }
        }
      },
      "Witness": {
        "type": "object",
        "properties": {
          "omega": {
            "type": "string",
            "description": "Revocation registry witness omega state",
            "example": "21 129EA8716C921058BB91826FD 21 8F19B91313862FE916C0 ..."
          }
        }
      },
      "RawEncCredAttr": {
        "type": "object",
        "properties": {
          "encoded": {
            "type": "string",
            "description": "(Numeric string) encoded value",
            "example": "412821674062189604125602903860586582569826459817431467861859655321"
          },
          "raw": {
            "type": "string",
            "description": "Raw value",
            "example": "Alex"
          }
        }
      },
      "Credential": {
        "type": "object",
        "properties": {
          "rev_reg": {
            "$ref": "#/components/schemas/RevReg"
          },
          "rev_reg_id": {
            "type": "string",
            "pattern": "^([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):4:([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(:.+)?:CL_ACCUM:.+$",
            "description": "Revocation registry identifier",
            "example": "WgWxqztrNooG92RXvxSTWv:4:WgWxqztrNooG92RXvxSTWv:3:CL:20:tag:CL_ACCUM:0"
          },
          "witness": {
            "$ref": "#/components/schemas/Witness"
          },
          "cred_def_id": {
            "type": "string",
            "pattern": "([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(.+)?$",
            "description": "Credential definition identifier",
            "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
          },
          "schema_id": {
            "type": "string",
            "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
            "description": "Schema identifier",
            "example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
          },
          "signature_correctness_proof": {
            "type": "object",
            "description": "Signature correctness proof"
          },
          "values": {
            "type": "object",
            "description": "Attribute names mapped to their raw and encoded values",
            "additionalProperties": {
              "$ref": "#/components/schemas/RawEncCredAttr"
            }
          },
          "signature": {
            "type": "object",
            "description": "Digital signature"
          }
        }
      },
      "CredentialList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Credential"
            }
          }
        }
      },
      "CredentialExchange": {
        "type": "object",
        "properties": {
          "credential_definition_id": {
            "type": "string"
          },
          "credential": {
            "type": "object"
          },
          "updated_at": {
            "type": "string",
            "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
            "description": "Time of last record update",
            "example": "2019-12-12 09:44:08Z"
          },
          "initiator": {
            "type": "string"
          },
          "credential_request": {
            "type": "object"
          },
          "auto_issue": {
            "type": "boolean"
          },
          "thread_id": {
            "type": "string"
          },
          "error_msg": {
            "type": "string"
          },
          "raw_credential": {
            "type": "object"
          },
          "credential_values": {
            "type": "object"
          },
          "connection_id": {
            "type": "string"
          },
          "parent_thread_id": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "schema_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "pattern": "^\\d{4}-\\d\\d-\\d\\d[T ]\\d\\d:\\d\\d(?:\\:(?:\\d\\d(?:\\.\\d{1,6})?))?(?:[+-]\\d\\d:?\\d\\d|Z|)$",
            "description": "Time of record creation",
            "example": "2019-12-12 09:44:08Z"
          },
          "credential_exchange_id": {
            "type": "string"
          },
          "credential_offer": {
            "type": "object"
          },
          "credential_id": {
            "type": "string"
          },
          "credential_request_metadata": {
            "type": "object"
          }
        }
      },
      "CredentialExchangeList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CredentialExchange"
            }
          }
        }
      },
      "CredentialSendRequest": {
        "type": "object",
        "properties": {
          "credential_definition_id": {
            "type": "string"
          },
          "connection_id": {
            "type": "string"
          },
          "credential_values": {
            "type": "object"
          }
        },
        "required": ["connection_id", "credential_definition_id"]
      },
      "CredentialSendResult": {
        "type": "object",
        "properties": {
          "credential_id": {
            "type": "string"
          }
        }
      },
      "CredentialOfferRequest": {
        "type": "object",
        "properties": {
          "credential_definition_id": {
            "type": "string"
          },
          "connection_id": {
            "type": "string"
          }
        },
        "required": ["connection_id", "credential_definition_id"]
      },
      "CredentialOfferResult": {
        "type": "object",
        "properties": {
          "credential_id": {
            "type": "string"
          }
        }
      },
      "CredentialRequestResult": {
        "type": "object",
        "properties": {
          "credential_id": {
            "type": "string"
          }
        }
      },
      "CredentialIssueRequest": {
        "type": "object",
        "properties": {
          "credential_values": {
            "type": "object"
          }
        },
        "required": ["credential_values"]
      },
      "CredentialIssueResult": {
        "type": "object",
        "properties": {
          "credential_id": {
            "type": "string"
          }
        }
      },
      "CredentialStoreRequest": {
        "type": "object",
        "properties": {
          "credential_id": {
            "type": "string"
          }
        }
      },
      "CredentialProblemReportRequest": {
        "type": "object",
        "properties": {
          "explain_ltxt": {
            "type": "string"
          }
        },
        "required": ["explain_ltxt"]
      },
      "AMLRecord": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string"
          },
          "amlContext": {
            "type": "string"
          },
          "aml": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "TAAAcceptance": {
        "type": "object",
        "properties": {
          "mechanism": {
            "type": "string"
          },
          "time": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TAARecord": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string"
          },
          "digest": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "TAAInfo": {
        "type": "object",
        "properties": {
          "taa_required": {
            "type": "boolean"
          },
          "aml_record": {
            "$ref": "#/components/schemas/AMLRecord"
          },
          "taa_accepted": {
            "$ref": "#/components/schemas/TAAAcceptance"
          },
          "taa_record": {
            "$ref": "#/components/schemas/TAARecord"
          }
        }
      },
      "TAAResult": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/TAAInfo"
          }
        }
      },
      "TAAAccept": {
        "type": "object",
        "properties": {
          "mechanism": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "CredentialDefinitionSendRequest": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "Credential definition identifier tag",
            "example": "default"
          },
          "schema_id": {
            "type": "string",
            "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
            "description": "Schema identifier",
            "example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
          }
        }
      },
      "CredentialDefinitionSendResults": {
        "type": "object",
        "properties": {
          "credential_definition_id": {
            "type": "string",
            "pattern": "([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(.+)?$",
            "description": "Credential definition identifier",
            "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
          }
        }
      },
      "CredentialDefinitionsCreatedResults": {
        "type": "object",
        "properties": {
          "credential_definition_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(.+)?$",
              "description": "Credential definition identifiers",
              "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
            }
          }
        }
      },
      "CredentialDefinition": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "Tag within credential definition identifier",
            "example": "tag"
          },
          "ver": {
            "type": "string",
            "pattern": "^[0-9.]+$",
            "description": "Node protocol version",
            "example": "1.0"
          },
          "schemaId": {
            "type": "string",
            "description": "Schema identifier within credential definition identifier",
            "example": "20"
          },
          "type": {
            "type": "string",
            "default": "CL",
            "description": "Signature type: CL for Camenisch-Lysyanskaya",
            "example": "CL"
          },
          "id": {
            "type": "string",
            "pattern": "([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}):3:CL:(([1-9][0-9]*)|([123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+))(.+)?$",
            "description": "Credential definition identifier",
            "example": "WgWxqztrNooG92RXvxSTWv:3:CL:20:tag"
          },
          "value": {
            "type": "object",
            "description": "Credential definition primary and revocation values"
          }
        }
      },
      "CredentialDefinitionGetResults": {
        "type": "object",
        "properties": {
          "credential_definition": {
            "$ref": "#/components/schemas/CredentialDefinition"
          }
        }
      },
      "SchemaSendRequest": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "array",
            "description": "List of schema attributes",
            "items": {
              "type": "string",
              "description": "attribute name",
              "example": "score"
            }
          },
          "schema_version": {
            "type": "string",
            "pattern": "^[0-9.]+$",
            "description": "Schema version",
            "example": "1.0"
          },
          "schema_name": {
            "type": "string",
            "description": "Schema name",
            "example": "prefs"
          }
        },
        "required": ["attributes", "schema_name", "schema_version"]
      },
      "SchemaSendResults": {
        "type": "object",
        "properties": {
          "schema_id": {
            "type": "string",
            "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
            "description": "Schema identifier",
            "example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
          }
        }
      },
      "SchemasCreatedResults": {
        "type": "object",
        "properties": {
          "schema_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
              "description": "Schema identifiers",
              "example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
            }
          }
        }
      },
      "Schema": {
        "type": "object",
        "properties": {
          "attr_names": {
            "type": "array",
            "description": "Schema attribute names",
            "items": {
              "type": "string",
              "description": "Attribute name",
              "example": "score"
            }
          },
          "name": {
            "type": "string",
            "description": "Schema name",
            "example": "schema_name"
          },
          "version": {
            "type": "string",
            "pattern": "^[0-9.]+$",
            "description": "Schema version",
            "example": "1.0"
          },
          "ver": {
            "type": "string",
            "pattern": "^[0-9.]+$",
            "description": "Node protocol version",
            "example": "1.0"
          },
          "seqNo": {
            "type": "integer",
            "format": "int32",
            "description": "Schema sequence number",
            "example": 999
          },
          "id": {
            "type": "string",
            "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}:2:.+:[0-9.]+$",
            "description": "Schema identifier",
            "example": "WgWxqztrNooG92RXvxSTWv:2:schema_name:1.0"
          }
        }
      },
      "SchemaGetResults": {
        "type": "object",
        "properties": {
          "schema_json": {
            "$ref": "#/components/schemas/Schema"
          }
        }
      },
      "DID": {
        "type": "object",
        "properties": {
          "did": {
            "type": "string",
            "pattern": "^(did:sov:)?[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{21,22}$",
            "description": "DID of interest",
            "example": "WgWxqztrNooG92RXvxSTWv"
          },
          "verkey": {
            "type": "string",
            "pattern": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{43,44}$",
            "description": "Public verification key",
            "example": "H3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV"
          },
          "public": {
            "type": "boolean",
            "description": "Whether DID is public",
            "example": false
          }
        }
      },
      "DIDList": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "description": "DID list",
            "items": {
              "$ref": "#/components/schemas/DID"
            }
          }
        }
      },
      "DIDResult": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/DID"
          }
        }
      },
      "GetTagPolicyResult": {
        "type": "object",
        "properties": {
          "taggables": {
            "type": "array",
            "description": "List of attributes taggable for credential search under current policy",
            "items": {
              "type": "string",
              "description": "Taggable attribute",
              "example": "score"
            }
          }
        }
      },
      "SetTagPolicyRequest": {
        "type": "object",
        "properties": {
          "taggables": {
            "type": "array",
            "description": "List of attributes to set taggable for credential search",
            "items": {
              "type": "string",
              "description": "Taggable attribute",
              "example": "score"
            }
          }
        }
      }
    }
  }
}
